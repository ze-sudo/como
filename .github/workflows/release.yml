name: Release

on:
  push:
    tags:
      - 'v*'

# リリース用の権限（最小限）
permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Release for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: como
            asset_name: como-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: como.exe
            asset_name: como-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: como
            asset_name: como-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: como
            asset_name: como-macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Security audit
      run: |
        cargo install cargo-audit --quiet
        cargo audit

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: runner.os != 'Windows'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Create archive (Unix)
      if: runner.os != 'Windows'
      run: tar -czf ${{ matrix.asset_name }}.tar.gz -C target/${{ matrix.target }}/release ${{ matrix.artifact_name }}

    - name: Create archive (Windows)
      if: runner.os == 'Windows'
      run: Compress-Archive -Path target/${{ matrix.target }}/release/${{ matrix.artifact_name }} -DestinationPath ${{ matrix.asset_name }}.zip

    - name: Generate checksums (Unix)
      if: runner.os != 'Windows'
      run: sha256sum ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256

    - name: Generate checksums (Windows)
      if: runner.os == 'Windows'
      run: Get-FileHash ${{ matrix.asset_name }}.zip -Algorithm SHA256 | Format-List > ${{ matrix.asset_name }}.zip.sha256

    - name: Upload binaries to release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ matrix.asset_name }}.*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
